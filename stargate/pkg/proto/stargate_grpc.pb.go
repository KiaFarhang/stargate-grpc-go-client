// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StargateClient is the client API for Stargate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StargateClient interface {
	// Executes a single CQL query.
	ExecuteQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	// Executes a batch of CQL queries.
	ExecuteBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Response, error)
}

type stargateClient struct {
	cc grpc.ClientConnInterface
}

func NewStargateClient(cc grpc.ClientConnInterface) StargateClient {
	return &stargateClient{cc}
}

func (c *stargateClient) ExecuteQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/stargate.Stargate/ExecuteQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stargateClient) ExecuteBatch(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/stargate.Stargate/ExecuteBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StargateServer is the server API for Stargate service.
// All implementations must embed UnimplementedStargateServer
// for forward compatibility
type StargateServer interface {
	// Executes a single CQL query.
	ExecuteQuery(context.Context, *Query) (*Response, error)
	// Executes a batch of CQL queries.
	ExecuteBatch(context.Context, *Batch) (*Response, error)
	mustEmbedUnimplementedStargateServer()
}

// UnimplementedStargateServer must be embedded to have forward compatible implementations.
type UnimplementedStargateServer struct {
}

func (UnimplementedStargateServer) ExecuteQuery(context.Context, *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteQuery not implemented")
}
func (UnimplementedStargateServer) ExecuteBatch(context.Context, *Batch) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteBatch not implemented")
}
func (UnimplementedStargateServer) mustEmbedUnimplementedStargateServer() {}

// UnsafeStargateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StargateServer will
// result in compilation errors.
type UnsafeStargateServer interface {
	mustEmbedUnimplementedStargateServer()
}

func RegisterStargateServer(s grpc.ServiceRegistrar, srv StargateServer) {
	s.RegisterService(&Stargate_ServiceDesc, srv)
}

func _Stargate_ExecuteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StargateServer).ExecuteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stargate.Stargate/ExecuteQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StargateServer).ExecuteQuery(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stargate_ExecuteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StargateServer).ExecuteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stargate.Stargate/ExecuteBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StargateServer).ExecuteBatch(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

// Stargate_ServiceDesc is the grpc.ServiceDesc for Stargate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stargate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stargate.Stargate",
	HandlerType: (*StargateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteQuery",
			Handler:    _Stargate_ExecuteQuery_Handler,
		},
		{
			MethodName: "ExecuteBatch",
			Handler:    _Stargate_ExecuteBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stargate.proto",
}
