//
// Copyright The Stargate Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.9.0
// source: query.proto

package proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Consistency int32

const (
	Consistency_ANY          Consistency = 0
	Consistency_ONE          Consistency = 1
	Consistency_TWO          Consistency = 2
	Consistency_THREE        Consistency = 3
	Consistency_QUORUM       Consistency = 4
	Consistency_ALL          Consistency = 5
	Consistency_LOCAL_QUORUM Consistency = 6
	Consistency_EACH_QUORUM  Consistency = 7
	Consistency_SERIAL       Consistency = 8
	Consistency_LOCAL_SERIAL Consistency = 9
	Consistency_LOCAL_ONE    Consistency = 10
)

// Enum value maps for Consistency.
var (
	Consistency_name = map[int32]string{
		0:  "ANY",
		1:  "ONE",
		2:  "TWO",
		3:  "THREE",
		4:  "QUORUM",
		5:  "ALL",
		6:  "LOCAL_QUORUM",
		7:  "EACH_QUORUM",
		8:  "SERIAL",
		9:  "LOCAL_SERIAL",
		10: "LOCAL_ONE",
	}
	Consistency_value = map[string]int32{
		"ANY":          0,
		"ONE":          1,
		"TWO":          2,
		"THREE":        3,
		"QUORUM":       4,
		"ALL":          5,
		"LOCAL_QUORUM": 6,
		"EACH_QUORUM":  7,
		"SERIAL":       8,
		"LOCAL_SERIAL": 9,
		"LOCAL_ONE":    10,
	}
)

func (x Consistency) Enum() *Consistency {
	p := new(Consistency)
	*p = x
	return p
}

func (x Consistency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Consistency) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[0].Descriptor()
}

func (Consistency) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[0]
}

func (x Consistency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Consistency.Descriptor instead.
func (Consistency) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{0}
}

type Payload_Type int32

const (
	Payload_CQL Payload_Type = 0
)

// Enum value maps for Payload_Type.
var (
	Payload_Type_name = map[int32]string{
		0: "CQL",
	}
	Payload_Type_value = map[string]int32{
		"CQL": 0,
	}
)

func (x Payload_Type) Enum() *Payload_Type {
	p := new(Payload_Type)
	*p = x
	return p
}

func (x Payload_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Payload_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[1].Descriptor()
}

func (Payload_Type) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[1]
}

func (x Payload_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Payload_Type.Descriptor instead.
func (Payload_Type) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{7, 0}
}

type TypeSpec_Basic int32

const (
	TypeSpec_CUSTOM    TypeSpec_Basic = 0
	TypeSpec_ASCII     TypeSpec_Basic = 1
	TypeSpec_BIGINT    TypeSpec_Basic = 2
	TypeSpec_BLOB      TypeSpec_Basic = 3
	TypeSpec_BOOLEAN   TypeSpec_Basic = 4
	TypeSpec_COUNTER   TypeSpec_Basic = 5
	TypeSpec_DECIMAL   TypeSpec_Basic = 6
	TypeSpec_DOUBLE    TypeSpec_Basic = 7
	TypeSpec_FLOAT     TypeSpec_Basic = 8
	TypeSpec_INT       TypeSpec_Basic = 9
	TypeSpec_TEXT      TypeSpec_Basic = 10
	TypeSpec_TIMESTAMP TypeSpec_Basic = 11
	TypeSpec_UUID      TypeSpec_Basic = 12
	TypeSpec_VARCHAR   TypeSpec_Basic = 13
	TypeSpec_VARINT    TypeSpec_Basic = 14
	TypeSpec_TIMEUUID  TypeSpec_Basic = 15
	TypeSpec_INET      TypeSpec_Basic = 16
	TypeSpec_DATE      TypeSpec_Basic = 17
	TypeSpec_TIME      TypeSpec_Basic = 18
	TypeSpec_SMALLINT  TypeSpec_Basic = 19
	TypeSpec_TINYINT   TypeSpec_Basic = 20
)

// Enum value maps for TypeSpec_Basic.
var (
	TypeSpec_Basic_name = map[int32]string{
		0:  "CUSTOM",
		1:  "ASCII",
		2:  "BIGINT",
		3:  "BLOB",
		4:  "BOOLEAN",
		5:  "COUNTER",
		6:  "DECIMAL",
		7:  "DOUBLE",
		8:  "FLOAT",
		9:  "INT",
		10: "TEXT",
		11: "TIMESTAMP",
		12: "UUID",
		13: "VARCHAR",
		14: "VARINT",
		15: "TIMEUUID",
		16: "INET",
		17: "DATE",
		18: "TIME",
		19: "SMALLINT",
		20: "TINYINT",
	}
	TypeSpec_Basic_value = map[string]int32{
		"CUSTOM":    0,
		"ASCII":     1,
		"BIGINT":    2,
		"BLOB":      3,
		"BOOLEAN":   4,
		"COUNTER":   5,
		"DECIMAL":   6,
		"DOUBLE":    7,
		"FLOAT":     8,
		"INT":       9,
		"TEXT":      10,
		"TIMESTAMP": 11,
		"UUID":      12,
		"VARCHAR":   13,
		"VARINT":    14,
		"TIMEUUID":  15,
		"INET":      16,
		"DATE":      17,
		"TIME":      18,
		"SMALLINT":  19,
		"TINYINT":   20,
	}
)

func (x TypeSpec_Basic) Enum() *TypeSpec_Basic {
	p := new(TypeSpec_Basic)
	*p = x
	return p
}

func (x TypeSpec_Basic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeSpec_Basic) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[2].Descriptor()
}

func (TypeSpec_Basic) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[2]
}

func (x TypeSpec_Basic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeSpec_Basic.Descriptor instead.
func (TypeSpec_Basic) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{9, 0}
}

type Batch_Type int32

const (
	Batch_LOGGED   Batch_Type = 0
	Batch_UNLOGGED Batch_Type = 1
	Batch_COUNTER  Batch_Type = 2
)

// Enum value maps for Batch_Type.
var (
	Batch_Type_name = map[int32]string{
		0: "LOGGED",
		1: "UNLOGGED",
		2: "COUNTER",
	}
	Batch_Type_value = map[string]int32{
		"LOGGED":   0,
		"UNLOGGED": 1,
		"COUNTER":  2,
	}
)

func (x Batch_Type) Enum() *Batch_Type {
	p := new(Batch_Type)
	*p = x
	return p
}

func (x Batch_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Batch_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_query_proto_enumTypes[3].Descriptor()
}

func (Batch_Type) Type() protoreflect.EnumType {
	return &file_query_proto_enumTypes[3]
}

func (x Batch_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Batch_Type.Descriptor instead.
func (Batch_Type) EnumDescriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{24, 0}
}

type ConsistencyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value Consistency `protobuf:"varint,1,opt,name=value,proto3,enum=stargate.Consistency" json:"value,omitempty"`
}

func (x *ConsistencyValue) Reset() {
	*x = ConsistencyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsistencyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsistencyValue) ProtoMessage() {}

func (x *ConsistencyValue) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsistencyValue.ProtoReflect.Descriptor instead.
func (*ConsistencyValue) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{0}
}

func (x *ConsistencyValue) GetValue() Consistency {
	if x != nil {
		return x.Value
	}
	return Consistency_ANY
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*Value `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{1}
}

func (x *Collection) GetElements() []*Value {
	if x != nil {
		return x.Elements
	}
	return nil
}

type UdtValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*Value `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UdtValue) Reset() {
	*x = UdtValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UdtValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UdtValue) ProtoMessage() {}

func (x *UdtValue) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UdtValue.ProtoReflect.Descriptor instead.
func (*UdtValue) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{2}
}

func (x *UdtValue) GetFields() map[string]*Value {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Uuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Is this going to have endian problems representing it this way?
	Msb uint64 `protobuf:"fixed64,1,opt,name=msb,proto3" json:"msb,omitempty"`
	Lsb uint64 `protobuf:"fixed64,2,opt,name=lsb,proto3" json:"lsb,omitempty"`
}

func (x *Uuid) Reset() {
	*x = Uuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uuid) ProtoMessage() {}

func (x *Uuid) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uuid.ProtoReflect.Descriptor instead.
func (*Uuid) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{3}
}

func (x *Uuid) GetMsb() uint64 {
	if x != nil {
		return x.Msb
	}
	return 0
}

func (x *Uuid) GetLsb() uint64 {
	if x != nil {
		return x.Lsb
	}
	return 0
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Inner:
	//	*Value_Null_
	//	*Value_Unset_
	//	*Value_Int
	//	*Value_Float
	//	*Value_Double
	//	*Value_Boolean
	//	*Value_String_
	//	*Value_Bytes
	//	*Value_Uuid
	//	*Value_Date
	//	*Value_Time
	//	*Value_Collection
	//	*Value_Udt
	Inner isValue_Inner `protobuf_oneof:"inner"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{4}
}

func (m *Value) GetInner() isValue_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *Value) GetNull() *Value_Null {
	if x, ok := x.GetInner().(*Value_Null_); ok {
		return x.Null
	}
	return nil
}

func (x *Value) GetUnset() *Value_Unset {
	if x, ok := x.GetInner().(*Value_Unset_); ok {
		return x.Unset
	}
	return nil
}

func (x *Value) GetInt() int64 {
	if x, ok := x.GetInner().(*Value_Int); ok {
		return x.Int
	}
	return 0
}

func (x *Value) GetFloat() float32 {
	if x, ok := x.GetInner().(*Value_Float); ok {
		return x.Float
	}
	return 0
}

func (x *Value) GetDouble() float64 {
	if x, ok := x.GetInner().(*Value_Double); ok {
		return x.Double
	}
	return 0
}

func (x *Value) GetBoolean() bool {
	if x, ok := x.GetInner().(*Value_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *Value) GetString_() string {
	if x, ok := x.GetInner().(*Value_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Value) GetBytes() []byte {
	if x, ok := x.GetInner().(*Value_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *Value) GetUuid() *Uuid {
	if x, ok := x.GetInner().(*Value_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *Value) GetDate() uint32 {
	if x, ok := x.GetInner().(*Value_Date); ok {
		return x.Date
	}
	return 0
}

func (x *Value) GetTime() uint64 {
	if x, ok := x.GetInner().(*Value_Time); ok {
		return x.Time
	}
	return 0
}

func (x *Value) GetCollection() *Collection {
	if x, ok := x.GetInner().(*Value_Collection); ok {
		return x.Collection
	}
	return nil
}

func (x *Value) GetUdt() *UdtValue {
	if x, ok := x.GetInner().(*Value_Udt); ok {
		return x.Udt
	}
	return nil
}

type isValue_Inner interface {
	isValue_Inner()
}

type Value_Null_ struct {
	Null *Value_Null `protobuf:"bytes,1,opt,name=null,proto3,oneof"`
}

type Value_Unset_ struct {
	Unset *Value_Unset `protobuf:"bytes,2,opt,name=unset,proto3,oneof"`
}

type Value_Int struct {
	// CQL types: tinyint, smallint, int, bigint, counter, timestamp
	Int int64 `protobuf:"zigzag64,3,opt,name=int,proto3,oneof"`
}

type Value_Float struct {
	// CQL types: float
	Float float32 `protobuf:"fixed32,4,opt,name=float,proto3,oneof"`
}

type Value_Double struct {
	// CQL types: double
	Double float64 `protobuf:"fixed64,5,opt,name=double,proto3,oneof"`
}

type Value_Boolean struct {
	// CQL types: boolean
	Boolean bool `protobuf:"varint,6,opt,name=boolean,proto3,oneof"`
}

type Value_String_ struct {
	// CQL types: ascii, varchar, text
	String_ string `protobuf:"bytes,7,opt,name=string,proto3,oneof"`
}

type Value_Bytes struct {
	// CQL types: blob, inet, custom
	Bytes []byte `protobuf:"bytes,8,opt,name=bytes,proto3,oneof"`
}

type Value_Uuid struct {
	// CQL types: uuid, timeuuid
	Uuid *Uuid `protobuf:"bytes,9,opt,name=uuid,proto3,oneof"`
}

type Value_Date struct {
	// CQL types: date
	// An unsigned integer representing days with Unix epoch (January, 1 1970) at 2^31.
	// Examples:
	// 0:    -5877641-06-23
	// 2^31: 1970-1-1
	// 2^32: 5881580-07-11
	Date uint32 `protobuf:"varint,10,opt,name=date,proto3,oneof"`
}

type Value_Time struct {
	// CQL types: time
	// An unsigned integer representing the number of nanoseconds since midnight. Valid values are
	// in the range 0 to 86399999999999 (inclusive).
	Time uint64 `protobuf:"varint,11,opt,name=time,proto3,oneof"`
}

type Value_Collection struct {
	// CQL types: list, set, map, tuple
	Collection *Collection `protobuf:"bytes,12,opt,name=collection,proto3,oneof"`
}

type Value_Udt struct {
	// CQL types: user defined types
	Udt *UdtValue `protobuf:"bytes,13,opt,name=udt,proto3,oneof"`
}

func (*Value_Null_) isValue_Inner() {}

func (*Value_Unset_) isValue_Inner() {}

func (*Value_Int) isValue_Inner() {}

func (*Value_Float) isValue_Inner() {}

func (*Value_Double) isValue_Inner() {}

func (*Value_Boolean) isValue_Inner() {}

func (*Value_String_) isValue_Inner() {}

func (*Value_Bytes) isValue_Inner() {}

func (*Value_Uuid) isValue_Inner() {}

func (*Value_Date) isValue_Inner() {}

func (*Value_Time) isValue_Inner() {}

func (*Value_Collection) isValue_Inner() {}

func (*Value_Udt) isValue_Inner() {}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cql        string           `protobuf:"bytes,1,opt,name=cql,proto3" json:"cql,omitempty"`
	Values     *Payload         `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	Parameters *QueryParameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteQuery.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{5}
}

func (x *Query) GetCql() string {
	if x != nil {
		return x.Cql
	}
	return ""
}

func (x *Query) GetValues() *Payload {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Query) GetParameters() *QueryParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type Values struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values     []*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	ValueNames []string `protobuf:"bytes,2,rep,name=value_names,json=valueNames,proto3" json:"value_names,omitempty"`
}

func (x *Values) Reset() {
	*x = Values{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Values) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Values) ProtoMessage() {}

func (x *Values) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Values.ProtoReflect.Descriptor instead.
func (*Values) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{6}
}

func (x *Values) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Values) GetValueNames() []string {
	if x != nil {
		return x.ValueNames
	}
	return nil
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Payload_Type `protobuf:"varint,1,opt,name=type,proto3,enum=stargate.Payload_Type" json:"type,omitempty"`
	Data *any.Any     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{7}
}

func (x *Payload) GetType() Payload_Type {
	if x != nil {
		return x.Type
	}
	return Payload_CQL
}

func (x *Payload) GetData() *any.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyspace          *wrappers.StringValue `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Consistency       *ConsistencyValue     `protobuf:"bytes,2,opt,name=consistency,proto3" json:"consistency,omitempty"`
	PageSize          *wrappers.Int32Value  `protobuf:"bytes,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PagingState       *wrappers.BytesValue  `protobuf:"bytes,4,opt,name=paging_state,json=pagingState,proto3" json:"paging_state,omitempty"`
	Tracing           bool                  `protobuf:"varint,5,opt,name=tracing,proto3" json:"tracing,omitempty"`
	SkipMetadata      bool                  `protobuf:"varint,6,opt,name=skip_metadata,json=skipMetadata,proto3" json:"skip_metadata,omitempty"`
	Timestamp         *wrappers.Int64Value  `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SerialConsistency *ConsistencyValue     `protobuf:"bytes,8,opt,name=serial_consistency,json=serialConsistency,proto3" json:"serial_consistency,omitempty"`
	NowInSeconds      *wrappers.Int32Value  `protobuf:"bytes,9,opt,name=now_in_seconds,json=nowInSeconds,proto3" json:"now_in_seconds,omitempty"`
}

func (x *QueryParameters) Reset() {
	*x = QueryParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameters) ProtoMessage() {}

func (x *QueryParameters) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameters.ProtoReflect.Descriptor instead.
func (*QueryParameters) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{8}
}

func (x *QueryParameters) GetKeyspace() *wrappers.StringValue {
	if x != nil {
		return x.Keyspace
	}
	return nil
}

func (x *QueryParameters) GetConsistency() *ConsistencyValue {
	if x != nil {
		return x.Consistency
	}
	return nil
}

func (x *QueryParameters) GetPageSize() *wrappers.Int32Value {
	if x != nil {
		return x.PageSize
	}
	return nil
}

func (x *QueryParameters) GetPagingState() *wrappers.BytesValue {
	if x != nil {
		return x.PagingState
	}
	return nil
}

func (x *QueryParameters) GetTracing() bool {
	if x != nil {
		return x.Tracing
	}
	return false
}

func (x *QueryParameters) GetSkipMetadata() bool {
	if x != nil {
		return x.SkipMetadata
	}
	return false
}

func (x *QueryParameters) GetTimestamp() *wrappers.Int64Value {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *QueryParameters) GetSerialConsistency() *ConsistencyValue {
	if x != nil {
		return x.SerialConsistency
	}
	return nil
}

func (x *QueryParameters) GetNowInSeconds() *wrappers.Int32Value {
	if x != nil {
		return x.NowInSeconds
	}
	return nil
}

type TypeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Spec:
	//	*TypeSpec_Basic_
	//	*TypeSpec_Map_
	//	*TypeSpec_List_
	//	*TypeSpec_Set_
	//	*TypeSpec_Udt_
	//	*TypeSpec_Tuple_
	Spec isTypeSpec_Spec `protobuf_oneof:"spec"`
}

func (x *TypeSpec) Reset() {
	*x = TypeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSpec) ProtoMessage() {}

func (x *TypeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSpec.ProtoReflect.Descriptor instead.
func (*TypeSpec) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{9}
}

func (m *TypeSpec) GetSpec() isTypeSpec_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (x *TypeSpec) GetBasic() TypeSpec_Basic {
	if x, ok := x.GetSpec().(*TypeSpec_Basic_); ok {
		return x.Basic
	}
	return TypeSpec_CUSTOM
}

func (x *TypeSpec) GetMap() *TypeSpec_Map {
	if x, ok := x.GetSpec().(*TypeSpec_Map_); ok {
		return x.Map
	}
	return nil
}

func (x *TypeSpec) GetList() *TypeSpec_List {
	if x, ok := x.GetSpec().(*TypeSpec_List_); ok {
		return x.List
	}
	return nil
}

func (x *TypeSpec) GetSet() *TypeSpec_Set {
	if x, ok := x.GetSpec().(*TypeSpec_Set_); ok {
		return x.Set
	}
	return nil
}

func (x *TypeSpec) GetUdt() *TypeSpec_Udt {
	if x, ok := x.GetSpec().(*TypeSpec_Udt_); ok {
		return x.Udt
	}
	return nil
}

func (x *TypeSpec) GetTuple() *TypeSpec_Tuple {
	if x, ok := x.GetSpec().(*TypeSpec_Tuple_); ok {
		return x.Tuple
	}
	return nil
}

type isTypeSpec_Spec interface {
	isTypeSpec_Spec()
}

type TypeSpec_Basic_ struct {
	Basic TypeSpec_Basic `protobuf:"varint,1,opt,name=basic,proto3,enum=stargate.TypeSpec_Basic,oneof"`
}

type TypeSpec_Map_ struct {
	Map *TypeSpec_Map `protobuf:"bytes,2,opt,name=map,proto3,oneof"`
}

type TypeSpec_List_ struct {
	List *TypeSpec_List `protobuf:"bytes,3,opt,name=list,proto3,oneof"`
}

type TypeSpec_Set_ struct {
	Set *TypeSpec_Set `protobuf:"bytes,4,opt,name=set,proto3,oneof"`
}

type TypeSpec_Udt_ struct {
	Udt *TypeSpec_Udt `protobuf:"bytes,5,opt,name=udt,proto3,oneof"`
}

type TypeSpec_Tuple_ struct {
	Tuple *TypeSpec_Tuple `protobuf:"bytes,6,opt,name=tuple,proto3,oneof"`
}

func (*TypeSpec_Basic_) isTypeSpec_Spec() {}

func (*TypeSpec_Map_) isTypeSpec_Spec() {}

func (*TypeSpec_List_) isTypeSpec_Spec() {}

func (*TypeSpec_Set_) isTypeSpec_Spec() {}

func (*TypeSpec_Udt_) isTypeSpec_Spec() {}

func (*TypeSpec_Tuple_) isTypeSpec_Spec() {}

type ColumnSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *TypeSpec `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ColumnSpec) Reset() {
	*x = ColumnSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnSpec) ProtoMessage() {}

func (x *ColumnSpec) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnSpec.ProtoReflect.Descriptor instead.
func (*ColumnSpec) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{10}
}

func (x *ColumnSpec) GetType() *TypeSpec {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ColumnSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultSet *Payload `protobuf:"bytes,1,opt,name=result_set,json=resultSet,proto3" json:"result_set,omitempty"`
	TracingId []byte   `protobuf:"bytes,2,opt,name=tracing_id,json=tracingId,proto3" json:"tracing_id,omitempty"`
	Warnings  []string `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{11}
}

func (x *Response) GetResultSet() *Payload {
	if x != nil {
		return x.ResultSet
	}
	return nil
}

func (x *Response) GetTracingId() []byte {
	if x != nil {
		return x.TracingId
	}
	return nil
}

func (x *Response) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type Unavailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consistency Consistency `protobuf:"varint,1,opt,name=consistency,proto3,enum=stargate.Consistency" json:"consistency,omitempty"`
	Required    int32       `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	Alive       int32       `protobuf:"varint,3,opt,name=alive,proto3" json:"alive,omitempty"`
}

func (x *Unavailable) Reset() {
	*x = Unavailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unavailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unavailable) ProtoMessage() {}

func (x *Unavailable) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unavailable.ProtoReflect.Descriptor instead.
func (*Unavailable) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{12}
}

func (x *Unavailable) GetConsistency() Consistency {
	if x != nil {
		return x.Consistency
	}
	return Consistency_ANY
}

func (x *Unavailable) GetRequired() int32 {
	if x != nil {
		return x.Required
	}
	return 0
}

func (x *Unavailable) GetAlive() int32 {
	if x != nil {
		return x.Alive
	}
	return 0
}

type WriteTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consistency Consistency `protobuf:"varint,1,opt,name=consistency,proto3,enum=stargate.Consistency" json:"consistency,omitempty"`
	Received    int32       `protobuf:"varint,2,opt,name=received,proto3" json:"received,omitempty"`
	BlockFor    int32       `protobuf:"varint,3,opt,name=block_for,json=blockFor,proto3" json:"block_for,omitempty"`
	WriteType   string      `protobuf:"bytes,4,opt,name=write_type,json=writeType,proto3" json:"write_type,omitempty"`
}

func (x *WriteTimeout) Reset() {
	*x = WriteTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteTimeout) ProtoMessage() {}

func (x *WriteTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteTimeout.ProtoReflect.Descriptor instead.
func (*WriteTimeout) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{13}
}

func (x *WriteTimeout) GetConsistency() Consistency {
	if x != nil {
		return x.Consistency
	}
	return Consistency_ANY
}

func (x *WriteTimeout) GetReceived() int32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *WriteTimeout) GetBlockFor() int32 {
	if x != nil {
		return x.BlockFor
	}
	return 0
}

func (x *WriteTimeout) GetWriteType() string {
	if x != nil {
		return x.WriteType
	}
	return ""
}

type ReadTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consistency Consistency `protobuf:"varint,1,opt,name=consistency,proto3,enum=stargate.Consistency" json:"consistency,omitempty"`
	Received    int32       `protobuf:"varint,2,opt,name=received,proto3" json:"received,omitempty"`
	BlockFor    int32       `protobuf:"varint,3,opt,name=block_for,json=blockFor,proto3" json:"block_for,omitempty"`
	DataPresent bool        `protobuf:"varint,4,opt,name=data_present,json=dataPresent,proto3" json:"data_present,omitempty"`
}

func (x *ReadTimeout) Reset() {
	*x = ReadTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTimeout) ProtoMessage() {}

func (x *ReadTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTimeout.ProtoReflect.Descriptor instead.
func (*ReadTimeout) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{14}
}

func (x *ReadTimeout) GetConsistency() Consistency {
	if x != nil {
		return x.Consistency
	}
	return Consistency_ANY
}

func (x *ReadTimeout) GetReceived() int32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *ReadTimeout) GetBlockFor() int32 {
	if x != nil {
		return x.BlockFor
	}
	return 0
}

func (x *ReadTimeout) GetDataPresent() bool {
	if x != nil {
		return x.DataPresent
	}
	return false
}

type ReadFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consistency Consistency `protobuf:"varint,1,opt,name=consistency,proto3,enum=stargate.Consistency" json:"consistency,omitempty"`
	Received    int32       `protobuf:"varint,2,opt,name=received,proto3" json:"received,omitempty"`
	BlockFor    int32       `protobuf:"varint,3,opt,name=block_for,json=blockFor,proto3" json:"block_for,omitempty"`
	NumFailures int32       `protobuf:"varint,4,opt,name=num_failures,json=numFailures,proto3" json:"num_failures,omitempty"`
	DataPresent bool        `protobuf:"varint,5,opt,name=data_present,json=dataPresent,proto3" json:"data_present,omitempty"`
}

func (x *ReadFailure) Reset() {
	*x = ReadFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFailure) ProtoMessage() {}

func (x *ReadFailure) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFailure.ProtoReflect.Descriptor instead.
func (*ReadFailure) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{15}
}

func (x *ReadFailure) GetConsistency() Consistency {
	if x != nil {
		return x.Consistency
	}
	return Consistency_ANY
}

func (x *ReadFailure) GetReceived() int32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *ReadFailure) GetBlockFor() int32 {
	if x != nil {
		return x.BlockFor
	}
	return 0
}

func (x *ReadFailure) GetNumFailures() int32 {
	if x != nil {
		return x.NumFailures
	}
	return 0
}

func (x *ReadFailure) GetDataPresent() bool {
	if x != nil {
		return x.DataPresent
	}
	return false
}

type FunctionFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyspace string   `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Function string   `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	ArgTypes []string `protobuf:"bytes,3,rep,name=arg_types,json=argTypes,proto3" json:"arg_types,omitempty"`
}

func (x *FunctionFailure) Reset() {
	*x = FunctionFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionFailure) ProtoMessage() {}

func (x *FunctionFailure) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionFailure.ProtoReflect.Descriptor instead.
func (*FunctionFailure) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{16}
}

func (x *FunctionFailure) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *FunctionFailure) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *FunctionFailure) GetArgTypes() []string {
	if x != nil {
		return x.ArgTypes
	}
	return nil
}

type WriteFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consistency Consistency `protobuf:"varint,1,opt,name=consistency,proto3,enum=stargate.Consistency" json:"consistency,omitempty"`
	Received    int32       `protobuf:"varint,2,opt,name=received,proto3" json:"received,omitempty"`
	BlockFor    int32       `protobuf:"varint,3,opt,name=block_for,json=blockFor,proto3" json:"block_for,omitempty"`
	NumFailures int32       `protobuf:"varint,4,opt,name=num_failures,json=numFailures,proto3" json:"num_failures,omitempty"`
	WriteType   string      `protobuf:"bytes,5,opt,name=write_type,json=writeType,proto3" json:"write_type,omitempty"`
}

func (x *WriteFailure) Reset() {
	*x = WriteFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteFailure) ProtoMessage() {}

func (x *WriteFailure) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteFailure.ProtoReflect.Descriptor instead.
func (*WriteFailure) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{17}
}

func (x *WriteFailure) GetConsistency() Consistency {
	if x != nil {
		return x.Consistency
	}
	return Consistency_ANY
}

func (x *WriteFailure) GetReceived() int32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *WriteFailure) GetBlockFor() int32 {
	if x != nil {
		return x.BlockFor
	}
	return 0
}

func (x *WriteFailure) GetNumFailures() int32 {
	if x != nil {
		return x.NumFailures
	}
	return 0
}

func (x *WriteFailure) GetWriteType() string {
	if x != nil {
		return x.WriteType
	}
	return ""
}

type AlreadyExists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Table    string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *AlreadyExists) Reset() {
	*x = AlreadyExists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlreadyExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlreadyExists) ProtoMessage() {}

func (x *AlreadyExists) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlreadyExists.ProtoReflect.Descriptor instead.
func (*AlreadyExists) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{18}
}

func (x *AlreadyExists) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *AlreadyExists) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type CasWriteUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consistency Consistency `protobuf:"varint,1,opt,name=consistency,proto3,enum=stargate.Consistency" json:"consistency,omitempty"`
	Received    int32       `protobuf:"varint,2,opt,name=received,proto3" json:"received,omitempty"`
	BlockFor    int32       `protobuf:"varint,3,opt,name=block_for,json=blockFor,proto3" json:"block_for,omitempty"`
}

func (x *CasWriteUnknown) Reset() {
	*x = CasWriteUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CasWriteUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CasWriteUnknown) ProtoMessage() {}

func (x *CasWriteUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CasWriteUnknown.ProtoReflect.Descriptor instead.
func (*CasWriteUnknown) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{19}
}

func (x *CasWriteUnknown) GetConsistency() Consistency {
	if x != nil {
		return x.Consistency
	}
	return Consistency_ANY
}

func (x *CasWriteUnknown) GetReceived() int32 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *CasWriteUnknown) GetBlockFor() int32 {
	if x != nil {
		return x.BlockFor
	}
	return 0
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{20}
}

func (x *Row) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type ResultSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns     []*ColumnSpec        `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	Rows        []*Row               `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	PageSize    *wrappers.Int32Value `protobuf:"bytes,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PagingState *wrappers.BytesValue `protobuf:"bytes,4,opt,name=paging_state,json=pagingState,proto3" json:"paging_state,omitempty"`
}

func (x *ResultSet) Reset() {
	*x = ResultSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultSet) ProtoMessage() {}

func (x *ResultSet) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultSet.ProtoReflect.Descriptor instead.
func (*ResultSet) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{21}
}

func (x *ResultSet) GetColumns() []*ColumnSpec {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ResultSet) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *ResultSet) GetPageSize() *wrappers.Int32Value {
	if x != nil {
		return x.PageSize
	}
	return nil
}

func (x *ResultSet) GetPagingState() *wrappers.BytesValue {
	if x != nil {
		return x.PagingState
	}
	return nil
}

type BatchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cql    string   `protobuf:"bytes,1,opt,name=cql,proto3" json:"cql,omitempty"`
	Values *Payload `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *BatchQuery) Reset() {
	*x = BatchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQuery) ProtoMessage() {}

func (x *BatchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQuery.ProtoReflect.Descriptor instead.
func (*BatchQuery) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{22}
}

func (x *BatchQuery) GetCql() string {
	if x != nil {
		return x.Cql
	}
	return ""
}

func (x *BatchQuery) GetValues() *Payload {
	if x != nil {
		return x.Values
	}
	return nil
}

type BatchParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyspace          *wrappers.StringValue `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Consistency       *ConsistencyValue     `protobuf:"bytes,2,opt,name=consistency,proto3" json:"consistency,omitempty"`
	Tracing           bool                  `protobuf:"varint,3,opt,name=tracing,proto3" json:"tracing,omitempty"`
	Timestamp         *wrappers.Int64Value  `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SerialConsistency *ConsistencyValue     `protobuf:"bytes,5,opt,name=serial_consistency,json=serialConsistency,proto3" json:"serial_consistency,omitempty"`
	NowInSeconds      *wrappers.Int32Value  `protobuf:"bytes,6,opt,name=now_in_seconds,json=nowInSeconds,proto3" json:"now_in_seconds,omitempty"`
}

func (x *BatchParameters) Reset() {
	*x = BatchParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchParameters) ProtoMessage() {}

func (x *BatchParameters) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchParameters.ProtoReflect.Descriptor instead.
func (*BatchParameters) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{23}
}

func (x *BatchParameters) GetKeyspace() *wrappers.StringValue {
	if x != nil {
		return x.Keyspace
	}
	return nil
}

func (x *BatchParameters) GetConsistency() *ConsistencyValue {
	if x != nil {
		return x.Consistency
	}
	return nil
}

func (x *BatchParameters) GetTracing() bool {
	if x != nil {
		return x.Tracing
	}
	return false
}

func (x *BatchParameters) GetTimestamp() *wrappers.Int64Value {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BatchParameters) GetSerialConsistency() *ConsistencyValue {
	if x != nil {
		return x.SerialConsistency
	}
	return nil
}

func (x *BatchParameters) GetNowInSeconds() *wrappers.Int32Value {
	if x != nil {
		return x.NowInSeconds
	}
	return nil
}

type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       Batch_Type       `protobuf:"varint,1,opt,name=type,proto3,enum=stargate.Batch_Type" json:"type,omitempty"`
	Queries    []*BatchQuery    `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty"`
	Parameters *BatchParameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{24}
}

func (x *Batch) GetType() Batch_Type {
	if x != nil {
		return x.Type
	}
	return Batch_LOGGED
}

func (x *Batch) GetQueries() []*BatchQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *Batch) GetParameters() *BatchParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type Value_Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Value_Null) Reset() {
	*x = Value_Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Null) ProtoMessage() {}

func (x *Value_Null) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Null.ProtoReflect.Descriptor instead.
func (*Value_Null) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{4, 0}
}

type Value_Unset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Value_Unset) Reset() {
	*x = Value_Unset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Unset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Unset) ProtoMessage() {}

func (x *Value_Unset) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Unset.ProtoReflect.Descriptor instead.
func (*Value_Unset) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{4, 1}
}

type TypeSpec_Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *TypeSpec `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *TypeSpec `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TypeSpec_Map) Reset() {
	*x = TypeSpec_Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSpec_Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSpec_Map) ProtoMessage() {}

func (x *TypeSpec_Map) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSpec_Map.ProtoReflect.Descriptor instead.
func (*TypeSpec_Map) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{9, 0}
}

func (x *TypeSpec_Map) GetKey() *TypeSpec {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TypeSpec_Map) GetValue() *TypeSpec {
	if x != nil {
		return x.Value
	}
	return nil
}

type TypeSpec_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element *TypeSpec `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
}

func (x *TypeSpec_List) Reset() {
	*x = TypeSpec_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSpec_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSpec_List) ProtoMessage() {}

func (x *TypeSpec_List) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSpec_List.ProtoReflect.Descriptor instead.
func (*TypeSpec_List) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{9, 1}
}

func (x *TypeSpec_List) GetElement() *TypeSpec {
	if x != nil {
		return x.Element
	}
	return nil
}

type TypeSpec_Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Element *TypeSpec `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
}

func (x *TypeSpec_Set) Reset() {
	*x = TypeSpec_Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSpec_Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSpec_Set) ProtoMessage() {}

func (x *TypeSpec_Set) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSpec_Set.ProtoReflect.Descriptor instead.
func (*TypeSpec_Set) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{9, 2}
}

func (x *TypeSpec_Set) GetElement() *TypeSpec {
	if x != nil {
		return x.Element
	}
	return nil
}

type TypeSpec_Udt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*TypeSpec `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TypeSpec_Udt) Reset() {
	*x = TypeSpec_Udt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSpec_Udt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSpec_Udt) ProtoMessage() {}

func (x *TypeSpec_Udt) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSpec_Udt.ProtoReflect.Descriptor instead.
func (*TypeSpec_Udt) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{9, 3}
}

func (x *TypeSpec_Udt) GetFields() map[string]*TypeSpec {
	if x != nil {
		return x.Fields
	}
	return nil
}

type TypeSpec_Tuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*TypeSpec `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *TypeSpec_Tuple) Reset() {
	*x = TypeSpec_Tuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSpec_Tuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSpec_Tuple) ProtoMessage() {}

func (x *TypeSpec_Tuple) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSpec_Tuple.ProtoReflect.Descriptor instead.
func (*TypeSpec_Tuple) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{9, 4}
}

func (x *TypeSpec_Tuple) GetElements() []*TypeSpec {
	if x != nil {
		return x.Elements
	}
	return nil
}

var File_query_proto protoreflect.FileDescriptor

var file_query_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8e,
	0x01, 0x0a, 0x08, 0x55, 0x64, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x64, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x1a, 0x4a, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2a, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6d, 0x73, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x73, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6c, 0x73, 0x62, 0x22, 0xc2, 0x03, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c,
	0x6c, 0x12, 0x2d, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52,
	0x03, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x75,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x03, 0x75, 0x64, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x64, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x03, 0x75, 0x64, 0x74, 0x1a, 0x06, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x07,
	0x0a, 0x05, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x22, 0x7f, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x71, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x71, 0x6c, 0x12, 0x29, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x52, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x70, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x0f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x51, 0x4c, 0x10, 0x00, 0x22, 0x8b, 0x04, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a,
	0x0c, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x73, 0x6b, 0x69, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x6e, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x77, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xb8, 0x07, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x30, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x48, 0x00, 0x52, 0x05, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70,
	0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x75,
	0x64, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x55, 0x64, 0x74,
	0x48, 0x00, 0x52, 0x03, 0x75, 0x64, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x1a, 0x55, 0x0a, 0x03, 0x4d, 0x61, 0x70,
	0x12, 0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x34, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x33, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x2c, 0x0a,
	0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x90, 0x01, 0x0a, 0x03,
	0x55, 0x64, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x55, 0x64, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a,
	0x4d, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37,
	0x0a, 0x05, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x53, 0x43, 0x49, 0x49, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x47, 0x49,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49,
	0x4d, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10,
	0x07, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x0a, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x0b, 0x12, 0x08,
	0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x41, 0x52, 0x43,
	0x48, 0x41, 0x52, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x41, 0x52, 0x49, 0x4e, 0x54, 0x10,
	0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x49, 0x4d, 0x45, 0x55, 0x55, 0x49, 0x44, 0x10, 0x0f, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x4e, 0x45, 0x54, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x12, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x49, 0x4e, 0x59, 0x49, 0x4e, 0x54, 0x10, 0x14, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x22, 0x48, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x26,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x78, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61,
	0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x9f, 0x01,
	0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa2, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x0f,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e,
	0x75, 0x6d, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x0d, 0x41, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x83, 0x01, 0x0a,
	0x0f, 0x43, 0x61, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46,
	0x6f, 0x72, 0x22, 0x2e, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x27, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x67, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74,
	0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a,
	0x0c, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a,
	0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x71, 0x6c, 0x12, 0x29, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x0f, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x39,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x49, 0x0a, 0x12, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x6e, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x77, 0x49, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e,
	0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x98, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x4f, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x51,
	0x55, 0x4f, 0x52, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d,
	0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x51, 0x55, 0x4f, 0x52, 0x55,
	0x4d, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x08, 0x12,
	0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10,
	0x09, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x0a,
	0x42, 0x23, 0x0a, 0x11, 0x69, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_query_proto_rawDescOnce sync.Once
	file_query_proto_rawDescData = file_query_proto_rawDesc
)

func file_query_proto_rawDescGZIP() []byte {
	file_query_proto_rawDescOnce.Do(func() {
		file_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_query_proto_rawDescData)
	})
	return file_query_proto_rawDescData
}

var file_query_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_query_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_query_proto_goTypes = []interface{}{
	(Consistency)(0),             // 0: stargate.Consistency
	(Payload_Type)(0),            // 1: stargate.Payload.Type
	(TypeSpec_Basic)(0),          // 2: stargate.TypeSpec.Basic
	(Batch_Type)(0),              // 3: stargate.Batch.Type
	(*ConsistencyValue)(nil),     // 4: stargate.ConsistencyValue
	(*Collection)(nil),           // 5: stargate.Collection
	(*UdtValue)(nil),             // 6: stargate.UdtValue
	(*Uuid)(nil),                 // 7: stargate.Uuid
	(*Value)(nil),                // 8: stargate.Value
	(*Query)(nil),                // 9: stargate.ExecuteQuery
	(*Values)(nil),               // 10: stargate.Values
	(*Payload)(nil),              // 11: stargate.Payload
	(*QueryParameters)(nil),      // 12: stargate.QueryParameters
	(*TypeSpec)(nil),             // 13: stargate.TypeSpec
	(*ColumnSpec)(nil),           // 14: stargate.ColumnSpec
	(*Response)(nil),             // 15: stargate.Response
	(*Unavailable)(nil),          // 16: stargate.Unavailable
	(*WriteTimeout)(nil),         // 17: stargate.WriteTimeout
	(*ReadTimeout)(nil),          // 18: stargate.ReadTimeout
	(*ReadFailure)(nil),          // 19: stargate.ReadFailure
	(*FunctionFailure)(nil),      // 20: stargate.FunctionFailure
	(*WriteFailure)(nil),         // 21: stargate.WriteFailure
	(*AlreadyExists)(nil),        // 22: stargate.AlreadyExists
	(*CasWriteUnknown)(nil),      // 23: stargate.CasWriteUnknown
	(*Row)(nil),                  // 24: stargate.Row
	(*ResultSet)(nil),            // 25: stargate.ResultSet
	(*BatchQuery)(nil),           // 26: stargate.BatchQuery
	(*BatchParameters)(nil),      // 27: stargate.BatchParameters
	(*Batch)(nil),                // 28: stargate.Batch
	nil,                          // 29: stargate.UdtValue.FieldsEntry
	(*Value_Null)(nil),           // 30: stargate.Value.Null
	(*Value_Unset)(nil),          // 31: stargate.Value.Unset
	(*TypeSpec_Map)(nil),         // 32: stargate.TypeSpec.Map
	(*TypeSpec_List)(nil),        // 33: stargate.TypeSpec.List
	(*TypeSpec_Set)(nil),         // 34: stargate.TypeSpec.Set
	(*TypeSpec_Udt)(nil),         // 35: stargate.TypeSpec.Udt
	(*TypeSpec_Tuple)(nil),       // 36: stargate.TypeSpec.Tuple
	nil,                          // 37: stargate.TypeSpec.Udt.FieldsEntry
	(*any.Any)(nil),              // 38: google.protobuf.Any
	(*wrappers.StringValue)(nil), // 39: google.protobuf.StringValue
	(*wrappers.Int32Value)(nil),  // 40: google.protobuf.Int32Value
	(*wrappers.BytesValue)(nil),  // 41: google.protobuf.BytesValue
	(*wrappers.Int64Value)(nil),  // 42: google.protobuf.Int64Value
}
var file_query_proto_depIdxs = []int32{
	0,  // 0: stargate.ConsistencyValue.value:type_name -> stargate.Consistency
	8,  // 1: stargate.Collection.elements:type_name -> stargate.Value
	29, // 2: stargate.UdtValue.fields:type_name -> stargate.UdtValue.FieldsEntry
	30, // 3: stargate.Value.null:type_name -> stargate.Value.Null
	31, // 4: stargate.Value.unset:type_name -> stargate.Value.Unset
	7,  // 5: stargate.Value.uuid:type_name -> stargate.Uuid
	5,  // 6: stargate.Value.collection:type_name -> stargate.Collection
	6,  // 7: stargate.Value.udt:type_name -> stargate.UdtValue
	11, // 8: stargate.ExecuteQuery.values:type_name -> stargate.Payload
	12, // 9: stargate.ExecuteQuery.parameters:type_name -> stargate.QueryParameters
	8,  // 10: stargate.Values.values:type_name -> stargate.Value
	1,  // 11: stargate.Payload.type:type_name -> stargate.Payload.Type
	38, // 12: stargate.Payload.data:type_name -> google.protobuf.Any
	39, // 13: stargate.QueryParameters.keyspace:type_name -> google.protobuf.StringValue
	4,  // 14: stargate.QueryParameters.consistency:type_name -> stargate.ConsistencyValue
	40, // 15: stargate.QueryParameters.page_size:type_name -> google.protobuf.Int32Value
	41, // 16: stargate.QueryParameters.paging_state:type_name -> google.protobuf.BytesValue
	42, // 17: stargate.QueryParameters.timestamp:type_name -> google.protobuf.Int64Value
	4,  // 18: stargate.QueryParameters.serial_consistency:type_name -> stargate.ConsistencyValue
	40, // 19: stargate.QueryParameters.now_in_seconds:type_name -> google.protobuf.Int32Value
	2,  // 20: stargate.TypeSpec.basic:type_name -> stargate.TypeSpec.Basic
	32, // 21: stargate.TypeSpec.map:type_name -> stargate.TypeSpec.Map
	33, // 22: stargate.TypeSpec.list:type_name -> stargate.TypeSpec.List
	34, // 23: stargate.TypeSpec.set:type_name -> stargate.TypeSpec.Set
	35, // 24: stargate.TypeSpec.udt:type_name -> stargate.TypeSpec.Udt
	36, // 25: stargate.TypeSpec.tuple:type_name -> stargate.TypeSpec.Tuple
	13, // 26: stargate.ColumnSpec.type:type_name -> stargate.TypeSpec
	11, // 27: stargate.Response.result_set:type_name -> stargate.Payload
	0,  // 28: stargate.Unavailable.consistency:type_name -> stargate.Consistency
	0,  // 29: stargate.WriteTimeout.consistency:type_name -> stargate.Consistency
	0,  // 30: stargate.ReadTimeout.consistency:type_name -> stargate.Consistency
	0,  // 31: stargate.ReadFailure.consistency:type_name -> stargate.Consistency
	0,  // 32: stargate.WriteFailure.consistency:type_name -> stargate.Consistency
	0,  // 33: stargate.CasWriteUnknown.consistency:type_name -> stargate.Consistency
	8,  // 34: stargate.Row.values:type_name -> stargate.Value
	14, // 35: stargate.ResultSet.columns:type_name -> stargate.ColumnSpec
	24, // 36: stargate.ResultSet.rows:type_name -> stargate.Row
	40, // 37: stargate.ResultSet.page_size:type_name -> google.protobuf.Int32Value
	41, // 38: stargate.ResultSet.paging_state:type_name -> google.protobuf.BytesValue
	11, // 39: stargate.BatchQuery.values:type_name -> stargate.Payload
	39, // 40: stargate.BatchParameters.keyspace:type_name -> google.protobuf.StringValue
	4,  // 41: stargate.BatchParameters.consistency:type_name -> stargate.ConsistencyValue
	42, // 42: stargate.BatchParameters.timestamp:type_name -> google.protobuf.Int64Value
	4,  // 43: stargate.BatchParameters.serial_consistency:type_name -> stargate.ConsistencyValue
	40, // 44: stargate.BatchParameters.now_in_seconds:type_name -> google.protobuf.Int32Value
	3,  // 45: stargate.Batch.type:type_name -> stargate.Batch.Type
	26, // 46: stargate.Batch.queries:type_name -> stargate.BatchQuery
	27, // 47: stargate.Batch.parameters:type_name -> stargate.BatchParameters
	8,  // 48: stargate.UdtValue.FieldsEntry.value:type_name -> stargate.Value
	13, // 49: stargate.TypeSpec.Map.key:type_name -> stargate.TypeSpec
	13, // 50: stargate.TypeSpec.Map.value:type_name -> stargate.TypeSpec
	13, // 51: stargate.TypeSpec.List.element:type_name -> stargate.TypeSpec
	13, // 52: stargate.TypeSpec.Set.element:type_name -> stargate.TypeSpec
	37, // 53: stargate.TypeSpec.Udt.fields:type_name -> stargate.TypeSpec.Udt.FieldsEntry
	13, // 54: stargate.TypeSpec.Tuple.elements:type_name -> stargate.TypeSpec
	13, // 55: stargate.TypeSpec.Udt.FieldsEntry.value:type_name -> stargate.TypeSpec
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_query_proto_init() }
func file_query_proto_init() {
	if File_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsistencyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UdtValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Values); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unavailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlreadyExists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CasWriteUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Unset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSpec_Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSpec_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSpec_Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSpec_Udt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSpec_Tuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_query_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Value_Null_)(nil),
		(*Value_Unset_)(nil),
		(*Value_Int)(nil),
		(*Value_Float)(nil),
		(*Value_Double)(nil),
		(*Value_Boolean)(nil),
		(*Value_String_)(nil),
		(*Value_Bytes)(nil),
		(*Value_Uuid)(nil),
		(*Value_Date)(nil),
		(*Value_Time)(nil),
		(*Value_Collection)(nil),
		(*Value_Udt)(nil),
	}
	file_query_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*TypeSpec_Basic_)(nil),
		(*TypeSpec_Map_)(nil),
		(*TypeSpec_List_)(nil),
		(*TypeSpec_Set_)(nil),
		(*TypeSpec_Udt_)(nil),
		(*TypeSpec_Tuple_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_query_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_query_proto_goTypes,
		DependencyIndexes: file_query_proto_depIdxs,
		EnumInfos:         file_query_proto_enumTypes,
		MessageInfos:      file_query_proto_msgTypes,
	}.Build()
	File_query_proto = out.File
	file_query_proto_rawDesc = nil
	file_query_proto_goTypes = nil
	file_query_proto_depIdxs = nil
}
